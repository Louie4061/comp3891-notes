some of ext2:
fairly complicated, custom data, not standard allocation approach
mostly just a data structure.
we also had the prefix trees. once used in telephones.
- a data structure that uses digits to index the tree. held in an array?
- we use some bits to map one table an etc.
- a concurrency problem. no os permits cc ac to a fs.
- two instances os x accessing stored data.
- just using locking won't work, if the power goes out.

we want to access files in min atomic way, the journal is a specific section
of fs containing info of what we were trying to do. os 2 will be scanning the journal
see what we were trying to do.

the ext3 fs:
design goals: add journaling capability to the ext2 FS.
backward and forward compat with ext2,
if we have a completed we can see what else, (confused?)

option1: journal fs data structures updates, pro: efficient use of journal space
start, delete dir entry, delete inode, release blocks 32, 17, 60.
option2: journal disk block actions, pro: multiple updates can be aggregated to single update
, also the journaling layer is fs-independent.
upldate blockn (contains dir), update block n2, inode allcoation bitmap.

see slides,
we are running an ext3fs above a journal block device -> block device or journal.

Journal blocking device:
commit: write transaction data to the journal, multiple fs are commited in one go
checkpoint: flush the journal to the disk, used when the 
journal is full or the fs is being unmounted

Journaling modes:
- ext3 supposrts two journaling modes:
- metadata + data (enforces atomicity of all fs)
- metadata journaling.

JBD:
can keep the journal on block device or in a files
jbd is independent of ext3-specific data structures
 - separation concerns
 - code reuse